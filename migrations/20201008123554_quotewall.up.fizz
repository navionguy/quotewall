
exec("echo create table conversations")
create_table("conversations") {
	t.Column("id", "uuid", {"primary": true})
	t.Column("occurredon", "timestamp", {})
	t.Column("publish", "bool", {})
}

exec("echo create table requests")
create_table("requests") {
	t.Column("id", "int", {"primary": true})
	t.Column("count", "int", {})
    t.Column("exec_ms", "int", {})
}

exec("echo create table authors")
create_table("authors") {
	t.Column("id", "uuid", {"primary": true})
	t.Column("name", "string", {})
}

exec("echo create table annotations")
create_table("annotations") {
	t.Column("id", "uuid", {"primary": true})
	t.Column("note", "string", {})
}

exec("echo create table quotes")
create_table("quotes") {
	t.Column("id", "uuid", {"primary": true})
	t.Column("saidon", "timestamp", {})
	t.Column("sequence", "integer", {})
	t.Column("phrase", "string", {})
	t.Column("publish", "bool", {})
	t.Column("annotation_id", "uuid", {"null": true})
	t.Column("author_id", "uuid", {})
	t.Column("conversation_id", "uuid", {})
	t.ForeignKey("annotation_id", {"annotations": ["id"]}, {"null": true})
	t.ForeignKey("author_id", {"authors": ["id"]}, {"on_delete": "restrict deferrable initially deferred"})
   t.ForeignKey("conversation_id", {"conversations": ["id"]}, {"on_delete": "restrict deferrable initially deferred"})
}

exec("echo create table users")
create_table("users"){
    t.Column("id", "uuid", {"primary": true})
    t.Column("email", "string", {})
    t.Column("password_hash", "string", {})
}

exec("echo create table permissions")
create_table("permissions") {
	t.Column("id", "uuid", {"primary": true})
	t.Column("name", "string", {})
	t.Column("user_id", "uuid", {})
	t.ForeignKey("user_id", {"users": ["id"]}, {"on_delete": "restrict deferrable initially deferred"})
}

exec("echo create view author_counts")
sql ("
/* returns an author record but adds a count of the number of quotes for the author */
CREATE OR REPLACE VIEW author_counts AS
        SELECT a.id AS id,
        a.name AS name,
        a.created_at AS created_at,
        a.updated_at AS updated_at,
        COUNT(a.id) AS count
        FROM (authors a
                JOIN quotes q ON ((a.id = q.author_id)))
        GROUP BY a.id;
")

exec("echo create function pick_from_range")
sql ("
/* generate a random number in a defined range */
CREATE OR REPLACE FUNCTION pick_from_range(bottom INTEGER ,top INTEGER) 
   RETURNS INTEGER AS
$$
BEGIN
   RETURN FLOOR(random()* (top-bottom + 1) + bottom);
END;
$$ language 'plpgsql' STRICT;")

exec("echo create extension uuid-ossp")
sql ("
CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";")

exec("echo create function shuffle_deck")
sql ("

/* shuffle_deck() Creates a table of conversation IDs and then scrambles them */
/* using a Fisher-Yates Shuffle.  (for you computer science types)  */
CREATE OR REPLACE FUNCTION shuffle_deck()
RETURNS INTEGER
AS $$
DECLARE
    max_rec     integer;
    i           integer;
    j           integer;
    keys        uuid[];
    marker      text;
BEGIN

    /* fastest way to clear the table */
    IF EXISTS (SELECT * FROM pg_tables WHERE tablename='shuffled_conversations')
         THEN
             DROP TABLE shuffled_conversations;
    END IF;    

    CREATE TABLE shuffled_conversations (
        id              uuid NOT NULL,
        sequence        integer NOT NULL PRIMARY KEY
    );
    ALTER TABLE shuffled_conversations
        ADD CONSTRAINT id_fkey FOREIGN KEY (id) REFERENCES public.conversations(id) ON DELETE RESTRICT DEFERRABLE INITIALLY DEFERRED;

    keys := ARRAY(SELECT id FROM conversations
                        WHERE publish = TRUE);    /* load up all the published conversation ID values */
    i := 0;                                       /* rolls over the entire array doing the shuffle */
    max_rec := array_length(keys,1);              /* get number of conversations in the array */

    LOOP
        i := i + 1; /* move forward, there is no 0 element */

        /* pick a random element still in the array */
        /* insert it into the current position */
        /* then put the current element into its position in the array */
        /* by the time I'm done, the Keys array is trashed, don't try to use it */

        j := pick_from_range(i,max_rec);    
        INSERT INTO shuffled_conversations( sequence, ID) VALUES( i, keys[j] );
        keys[j] := keys[i];

        EXIT WHEN i = max_rec;
    END LOOP;

    /* set the current date as a comment on the table */
    marker := (SELECT CURRENT_DATE);
    EXECUTE FORMAT('COMMENT ON TABLE shuffled_conversations IS ''%I''', marker);

    /* and the record count as a comment on the id column */
    EXECUTE FORMAT('COMMENT ON COLUMN shuffled_conversations.sequence IS ''%I''', max_rec);
    
    /* tag this run of the record shuffle */
    keys[1] := (SELECT uuid_generate_v4());
    EXECUTE FORMAT('COMMENT ON COLUMN shuffled_conversations.id IS ''%I''', keys[1]);
    
    RETURN max_rec;
END
$$ language 'plpgsql' STRICT;
")


exec("echo create function log_metric")
sql ("

CREATE OR REPLACE FUNCTION log_metric(ms integer) RETURNS integer
    AS $$
/* log_metric is passed how long a request took in milliseconds */
/* and tries to add it to the newest row of data to create a    */
/* time based 'bucket' of requests.  A new row is added anytime */
/* the oldest row ages past 24 hours or if the rolling count of */
/* milliseconds will exceed the maximum value of an integer,    */
/* 2147483647.  Getting that to happen would require a *lot* of */
/* concurrent requests to the server.  But it could happen!     */
/*                                                              */
/* After updating the chosen row, I calculate the average time  */
/* of all the requests in that bucket and return it.            */
DECLARE
  MAXINT   CONSTANT INTEGER := 2147483647;
  SPAREROW CONSTANT INTEGER := 5;
  typical           INTEGER;
  bucket            INTEGER;
  totalms           INTEGER;
  rqst              INTEGER;
  created           TIMESTAMP;
BEGIN
  /* see if there are any rows in the table */
  IF NOT EXISTS(SELECT r.ID FROM requests r ORDER BY r.ID DESC LIMIT 1)
    THEN
      /* table doesn't contain any rows so I will just insert one */
      /* my one data point becomes the new average */

      INSERT INTO requests(count, exec_ms, created_at, updated_at) VALUES( 1, ms, now(), now());
      typical = ms;
      return typical;
    END IF;

  /* Try to add this new metric */ 
  /* First, get the most recent bucket */
  SELECT r.ID, r.COUNT, r.EXEC_MS, r.CREATED_AT INTO bucket, rqst, totalms, created FROM requests r ORDER BY r.ID DESC LIMIT 1;

  /* is it still current? */
  IF EXTRACT(doy FROM now()) <> EXTRACT(doy FROM created)
    THEN
      /* New day, time for a new bucket */

      INSERT INTO requests(count, exec_ms, created_at, updated_at) VALUES( 1, ms, now(), now());
      typical = ms;
      return typical;
    END IF;

  /* make sure he has room for my sample */

  IF (MAXINT - totalms) < ms OR (MAXINT - rqst) < 5
    THEN
      /* a counter is about to overflow, new bucket please */

      INSERT INTO requests(count, exec_ms, created_at, updated_at) VALUES( 1, ms, now(), now());
      typical = ms;
      return typical;
    END IF;

  UPDATE requests SET count = count + 1, exec_ms = exec_ms + ms, updated_at = now() WHERE ID = bucket;
  typical = (totalms + ms) / (rqst + 1);
  RETURN typical;
END

$$ language 'plpgsql' STRICT;
")

exec("echo create function new_requests_table")
sql ("

CREATE OR REPLACE FUNCTION new_requests_table() RETURNS VOID
    AS $$
/* The time has come to create a new 'requests' table.  To do   */
/* so, I rename the table using the timestamp of the first      */
/* entry getting created and the last update timestamp to form  */
/* a unique name. */
DECLARE
  StartDate text;
  EndDate   text;
  NewName   text;
BEGIN
  /* first rename the table */
  SELECT r.UPDATED_AT INTO StartDate FROM requests r ORDER BY r.ID ASC LIMIT 1;
  SELECT r.UPDATED_AT INTO EndDate FROM requests r ORDER BY r.ID DESC LIMIT 1;
  SELECT CONCAT('requests', StartDate, ' to ', EndDate) INTO NewName;
  EXECUTE format('ALTER TABLE requests RENAME TO %I', newName);

  /* now recreate it */
  CREATE TABLE public.requests (
    id SERIAL PRIMARY KEY,
    count integer NOT NULL,
    exec_ms integer NOT NULL,
    created_at timestamp without time zone NOT NULL,
    updated_at timestamp without time zone NOT NULL
);
  ALTER TABLE public.requests OWNER TO postgres;

END

$$ language 'plpgsql' STRICT;
")